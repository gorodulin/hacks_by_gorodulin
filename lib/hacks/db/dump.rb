HackTree.define do
  group :db do
    desc <<-EOT
      Take database snapshot (MySQL InnoDB only)
      
      Examples:

        >> c.db.dump

        >> c.db.dump :foo
    EOT

    hack :dump do |mnemo = :current|
      raise ArgumentError, "Unsupported mnemo `#{mnemo}`" unless mnemo.kind_of? Symbol

      # TODO: configuration conventions needed!
      konfig = {
        :db_snapshot_folder => File.join(Rails.root, "tmp"),
      }

      # mnemo    = mnemo.to_s
      tables   = ActiveRecord::Base.connection.tables
      version  = ActiveRecord::Migrator.current_version
      config   = ActiveRecord::Base.configurations[Rails.env]
      basename = [Rails.env, version, mnemo].join('.').concat(".sql")
      dumpfile = File.join(konfig[:db_snapshot_folder], basename)

      unless config["adapter"] == "mysql2"
        puts "Error: this hack is for MySQL-driven Rails applications only. " +
             "Your DB adapter is `%s`" % config['adapter'].to_s
        next # TODO: should be return, ask Hly
      end

      if tables.empty?
        puts "Error: database has no tables"
        next # TODO: should be return, ask Hly
      end
      
      # Get/set dump description
      
      if File.readable_real?(dumpfile)
        description = File.open(dumpfile, &:readline).match(/^-- DESCRIPTION: (.+)$/).to_a[1] 
        File.unlink(dumpfile)
      end
      
      description = \
      if mnemo == :undo
        "Autogenerated `undo` snapshot"
      else
        if description.blank?
          print "Enter description: "
        else
          print "Current description is: `%s`\nIf needed, enter new description or `-` to erase: " % description 
        end
        user_input = gets.gsub(/\s+/, " ").strip
        user_input.blank? ? description : user_input
      end
      
      File.open(dumpfile, 'w') {|f| f.write("-- DESCRIPTION: #{description}\n")} unless description.blank? || description == "-"
      
      # Prepare to dump
  
      mysqldump_args = [
          "--user=%s" % config['username'],
          "--databases %s" % config['database'],
          "--single-transaction", # InnoDB only
          "--complete-insert",
      ]
      mysqldump_args << "--password=%s" % config['password'] unless config["password"].blank?
      mysqldump_args << "--protocol=SOCKET --socket=%s" % config['socket'] unless config["socket"].blank?

      # Execute shell command
      
      command = ["mysqldump", mysqldump_args, ">>", dumpfile.shellescape] * " "
      pid, stdin, stdout, stderr = Open4::popen4(command)

      stdout, stderr = stdout.lines.to_a.join.strip, stderr.lines.to_a.join.strip
      exitstatus     = Process::waitpid2(pid)[1].exitstatus
        
      unless exitstatus == 0
        puts "Error: mysqldump returned with exit status %s. Here are the details:" % exitstatus
        puts command, stdout, stderr
      else
        puts "Snapshot `%s` taken" % basename
      end
      
      nil
    end
  end
end
